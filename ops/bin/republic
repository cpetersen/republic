#!/usr/bin/env ruby

require "aws-sdk"
require "barge"
require "json"
require "net/ssh"
require "redis"
require "thor"

module Republic
  class CommonTasks < Thor
    no_tasks do
      def cluster_name
        "republic"
      end

      def redis
        @redis ||= Redis.new(url: ENV["REDIS_URL"])
      end

      def barge
        @barge ||= Barge::Client.new(access_token: ENV["DIGITALOCEAN_TOKEN"])
      end

      def keys
        @keys ||= redis.hkeys(cluster_type_name)
      end

      def delete_keys_for(droplet_id)
        # name = redis.hget(cluster_type_name, droplet_id)
        redis.hdel(cluster_type_name, droplet_id)
        # redis.hdel("#{cluster_type_name}-name-to-id", name) if name
      end

      def ssh_exec!(ssh, command)
        stdout_data = ""
        stderr_data = ""
        exit_code = nil
        exit_signal = nil
        ssh.open_channel do |channel|
          channel.exec(command) do |ch, success|
            unless success
              abort "FAILED: couldn't execute command (ssh.channel.exec)"
            end
            channel.on_data do |ch,data|
              stdout_data+=data
            end

            channel.on_extended_data do |ch,type,data|
              stderr_data+=data
            end

            channel.on_request("exit-status") do |ch,data|
              exit_code = data.read_long
            end

            channel.on_request("exit-signal") do |ch, data|
              exit_signal = data.read_long
            end
          end
        end
        ssh.loop
        [stdout_data, stderr_data, exit_code, exit_signal]
      end
    end
  end

  class GeneralCluster < CommonTasks
    desc "add N", "Add machines to the cluster"
    def add(n)
      n.to_i.times do
        redis.incr("#{cluster_type_name}-counter")
        i = redis.get("#{cluster_type_name}-counter")
        name = "#{cluster_type_name}-#{i}"
        puts "Launching #{name}"
        result = barge.droplet.create(droplet_options.merge(name: name))
        if result.droplet
          redis.hset(cluster_type_name, result.droplet.id, result.droplet.name)
          # redis.hset("#{cluster_type_name}-name-to-id", result.droplet.name, result.droplet.id)
        else
          puts "Error with [#{name}]"
          puts result.inspect
        end
      end
    end

    desc "status", "Check the status of machines in the cluster"
    method_option :check_ssh, type: :boolean, aliases: "-s", default: false
    def status
      puts "No #{type_name} machines" if machines.empty?
      machines(options[:check_ssh]).each do |machine|
        if machine[:status] == "not_found"
          puts "#{machine[:name]} :: Not Found"
        else
          puts "#{machine[:name]} :: #{machine[:ip_address]} :: #{machine[:id]} :: #{machine[:status]}"
        end
      end
    end

    desc "destroy", "Destroy the machines in the cluster"
    method_option :all, type: :boolean, aliases: "-a", default: false
    def destroy(*args)
      (help(:destroy) && exit) if(args.size==0 && !options[:all])
      keys.each do |droplet_id|
        droplet_name = redis.hget(cluster_type_name, droplet_id)
        if(options[:all] || args.include?(droplet_name))
          result = barge.droplet.destroy(droplet_id)
          if result.success?
            puts "Destroyed #{droplet_name}"
            delete_keys_for(droplet_id)
          else
            if result.id=="not_found"
              delete_keys_for(droplet_id)
            end
            puts "Unabled to destroy #{droplet_name}, [#{result.id}] [#{result.message}]"
          end
        end
      end
      update_dns
      update_ssh_config
    end

    no_tasks do
      def cluster_type_name
        "#{cluster_name}-#{type_name}"
      end

      def type_name
        raise "Error: Please set type_name in the subclass"
      end

      def machines?
        keys && keys.size > 0
      end

      def machines(check_ssh=false)
        @machines ||= keys.collect do |droplet_id|
          machine = {id: droplet_id}
          machine[:name] = redis.hget(cluster_type_name, droplet_id)
          machine[:type] = type_name
          droplet = barge.droplet.show(droplet_id)
          if droplet && droplet.droplet
            machine[:ip_address] = droplet.droplet.networks["v4"].first.ip_address
            machine[:status] = droplet.droplet.status
            if(check_ssh && machine[:status]=="active")
              begin
                Net::SSH.start(machine[:ip_address], 'root') do |ssh|
                  ssh_exec!(ssh, "ls")
                end
              rescue
                machine[:status] = "waiting for ssh"
              end
            end
          else
            machine[:status] = "not_found"
          end
          machine
        end
      end

      def droplet_options
        {
          region: "nyc2",
          size: "512mb",
          image: "ubuntu-14-04-x64",
          ssh_keys: [ENV["DIGITALOCEAN_KEY_ID"].to_i],
          backups: false,
          ipv6: false,
          user_data: nil,
          private_networking: nil
        }.merge(droplet_modifications)
      end

      def droplet_modifications
        {}
      end

      def update_ssh_config(verbose=false)
        filename = "#{ENV["HOME"]}/.ssh/ssh.d/99_#{type_name}"
        if machines?
          File.open(filename, "w") do |file|
            machines.each do |machine|
              file.puts "Host #{machine[:name]}"
              file.puts "\tHostname #{machine[:ip_address]}"
              file.puts "\tUser root"
              file.puts ""
              puts "Configured #{machine[:name]}" if verbose
            end
            file.puts ""
            file.puts ""
          end
        else
          File.delete(filename) if File.exists?(filename)
        end
      end

      def update_dns
        # NoOp (overriden in Leader)
      end
    end
  end

  class Leader < GeneralCluster
    desc "dns", "Update the dns records"
    def dns
      update_dns
    end

    no_tasks do
      def type_name
        "leader"
      end

      def route53
        @route53 ||= AWS::Route53.new(access_key_id: ENV["AWS_ACCESS_KEY_ID"], secret_access_key: ENV["AWS_SECRET_ACCESS_KEY"])
      end

      # Resouce Record Sets
      def rrsets
        @rrsets ||= AWS::Route53::HostedZone.new(ENV["AWS_HOSTED_ZONE_ID"]).rrsets
      end

      def update_dns
        url = "nestedset.com."
        rrset = rrsets[url, "A"]
        resource_records = machines.collect { |m| { value: m[:ip_address] }}
        if resource_records.empty?
          rrset.delete if rrset.exists?
        else
          if rrset.exists?
            rrset.resource_records = resource_records
            rrset.update
          else
            rrset = rrsets.create(url, "A", ttl: 3600, resource_records: resource_records)
          end
        end
      end
    end
  end

  class Worker < GeneralCluster
    no_tasks do
      def type_name
        "worker"
      end
    end
  end

  class Tls < Thor
    desc "init", "Init the tls keys"
    def init
      FileUtils.mkdir_p(".tls")

      config = OpenSSL::Config.new("openssl.cnf")

      ca_key = create_key("ca")

      # START Create CA Cert
      ca_name = OpenSSL::X509::Name.new
      config["req_distinguished_name"].each do |key, value|
        ca_name.add_entry( key, value )
      end
      ca_cert, ca_ef = create_cert(ca_key)
      ca_cert.subject = ca_name
      ca_cert.issuer = ca_name
      ca_ef.issuer_certificate = ca_cert
      config["req_ext"].each do |key, value|
        ca_cert.add_extension( ca_ef.create_extension( key, value, true ) )
      end
      config["x509_ext"].each do |key, value|
        ca_cert.add_extension( ca_ef.create_extension( key, value, true ) )
      end
      open '.tls/ca.cert.pem', 'w' do |io| io.write ca_cert.to_pem end
      ca_cert.sign(ca_key, OpenSSL::Digest::SHA256.new)
      # END Create CA Cert

      # START Create Swarm CERT
      swarm_key = create_key("swarm")
      swarm_csr = create_csr("swarm", "/CN=nestedset.com", swarm_key)
      csr_to_cert("swarm", swarm_csr, ca_name, ca_key, config["req_ext"])
      # END Create Swarm CERT

      # START Create Node Certs
      ["republic-leader-1","republic-leader-2","republic-leader-3","republic-worker-1","republic-worker-2","republic-worker-3"].each do |name|
        # create_node_cert(name, ca_name, ca_key)
        node(name)
      end
      # END Create Node Certs

      # START Create Client CERT
      host = Socket.gethostname
      host_key = create_key(host)
      host_csr = create_csr(host, "/CN=#{host}", host_key)
      csr_to_cert(host, host_csr, ca_name, ca_key)
      # END Create Client CERT
    end

    desc "node NODE", "Create the certs for a specific node"
    def node(node)
      config = OpenSSL::Config.new("openssl.cnf")

      # START Create CA Cert
      ca_name = OpenSSL::X509::Name.new
      config["req_distinguished_name"].each do |key, value|
        ca_name.add_entry( key, value )
      end
      create_node_cert(node, ca_name, get_key("ca"))
    end

    no_tasks do
      def create_key(name)
        # Create CA Key
        key = OpenSSL::PKey::RSA.new 4096
        open(".tls/#{name}.private_key.pem", "w") do |io| io.write key.to_pem end
        open(".tls/#{name}.public_key.pem", "w") do |io| io.write key.public_key.to_pem end
        key
      end

      def create_cert(key)
        cert = OpenSSL::X509::Certificate.new
        cert.version = 2
        cert.serial = 0 # TODO: Make two digit secure random
        cert.not_before = Time.now
        cert.not_after = cert.not_before + 10 * 365 * 24 * 60 * 60 # 10 years validity
        cert.public_key = key.public_key

        ef = OpenSSL::X509::ExtensionFactory.new
        ef.subject_certificate = cert
        [cert, ef]
      end

      def create_csr(name, common_name, key)
        csr = OpenSSL::X509::Request.new
        csr.public_key = key.public_key
        csr.subject = OpenSSL::X509::Name.parse(common_name)
        csr.sign(key, OpenSSL::Digest::SHA256.new)
        open(".tls/#{name}.csr.pem", "w") do |io| io.write csr.to_pem end
        csr
      end

      def get_key(name)
        OpenSSL::PKey::RSA.new File.read(".tls/#{name}.private_key.pem")
      end

      def csr_to_cert(name, csr, ca_name, ca_key, section=nil)
        cert = OpenSSL::X509::Certificate.new
        cert.serial = 0
        cert.version = 2
        cert.not_before = Time.now
        cert.not_after = Time.now + 10 * 365 * 24 * 60 * 60 # 10 years validity
        cert.subject = csr.subject
        cert.public_key = csr.public_key
        cert.issuer = ca_name
        cert.sign(ca_key, OpenSSL::Digest::SHA256.new)
        open(".tls/#{name}.cert.pem", "w") do |io| io.write cert.to_pem end
        cert
      end

      def create_node_cert(name, ca_name, ca_key)
        node_key = create_key(name)
        node_csr = create_csr(name, "/CN=#{name}.nestedset.com", node_key)
        node_cert = csr_to_cert(name, node_csr, ca_name, ca_key)
        node_cert
      end
    end
  end

  class CLI < CommonTasks
    desc "leader [SUBCOMMAND]", "Manage the leader machines"
    subcommand "leader", Leader

    desc "worker [SUBCOMMAND]", "Manage the worker machines"
    subcommand "worker", Worker

    desc "tls [SUBCOMMAND]", "Manage tls"
    subcommand "tls", Tls

    desc "status", "Get status of all machine groups"
    method_option :check_ssh, type: :boolean, aliases: "-s", default: false
    method_option :clean, type: :boolean, aliases: "-c", default: false
    def status
      nothing = true
      machine_types.each do |klazz|
        instance = klazz.new
        instance.machines(options[:check_ssh]).each do |machine|
          nothing = false
          if machine[:status] == "not_found"
            puts "#{machine[:name]} :: Not Found"
            instance.delete_keys_for(machine[:id]) if options[:clean]
          else
            puts "#{machine[:name]} :: #{machine[:ip_address]} :: #{machine[:id]} :: #{machine[:status]}"
          end
        end
      end
      puts "Nothing running" if nothing
    end

    desc "inventory", "Generate ansible inventory file in the current directory"
    def inventory
      update_inventory_file
    end

    desc "provision", "Provision the machines in the cluster"
    def provision
      update_inventory_file # Make sure inventory is up to date
      command = "ansible-playbook -i inventory provision.yml"
      puts "Running [#{command}]"
      shell_command(command)
    end

    desc "join", "Join the cluster"
    def join
      update_inventory_file # Make sure inventory is up to date
      leader_machines = Leader.new.machines
      command = "ansible-playbook -i inventory join.yml --extra-vars \"ip_address=#{leader_machines.first[:ip_address]}\""
      puts "Running [#{command}]"
      shell_command(command)
      puts "Updating A Record"
      Leader.new.update_dns
    end

    desc "destroy NAME", "Destroy specific machines of any type in the cluster"
    method_option :all, type: :boolean, aliases: "-a", default: false
    def destroy(*args)
      (help(:destroy) && exit) if(args.size==0 && !options[:all])
      machine_types.each do |klazz|
        instance = klazz.new
        redis.hkeys(instance.cluster_type_name).each do |droplet_id|
          droplet_name = redis.hget(instance.cluster_type_name, droplet_id)
          if(options[:all] || args.include?(droplet_name))
            result = barge.droplet.destroy(droplet_id)
            if result.success?
              puts "Destroyed #{droplet_name}"
              instance.delete_keys_for(droplet_id)
            else
              if result.id=="not_found"
                instance.delete_keys_for(droplet_id)
              end
              puts "Unabled to destroy #{droplet_name}, [#{result.id}] [#{result.message}]"
            end
          end
        end
        instance.update_dns
        instance.update_ssh_config
      end
      update_inventory_file
    end

    desc "backup", "Backup redis connection"
    def backup
      result = {}
      redis.keys.each do |key|
        type = redis.type(key)
        result[key] = case type
        when "hash"
          redis.hgetall(key)
        when "string"
          redis.get(key)
        else

        end
      end
      File.open("redis.json", "w") do |file|
        file.puts result.to_json
      end
    end

    desc "config", "Setup client configuration for the leader"
    def config
      update_ssh_config(true)
    end

    no_tasks do
      def machine_types
        [Leader, Worker]
      end

      def machines?
        machine_types.inject(false) { |memo, klazz| klazz.new.machines? || memo }
      end

      def update_inventory_file
        if machines?
          File.open("inventory", "w") do |file|
            machine_types.each do |klazz|
              _machines = klazz.new.machines
              unless _machines.empty?
                file.puts "[#{klazz.name.split('::').last.downcase}]"
                _machines.each do |machine|
                  file.puts "#{machine[:ip_address]} ansible_ssh_user=root"
                end
                file.puts ""
              end
            end
          end
        else
          File.delete("inventory") if File.exists?("inventory")
        end
      end

      def update_ssh_config(verbose=false)
        machine_types.each { |klazz| klazz.new.update_ssh_config(verbose) }
      end

      def shell_command(command)
        output = []
        IO.popen(command).each do |line|
          puts line.chomp
          STDOUT.flush
          output << line.chomp
        end
        output
      end
    end
  end
end

Republic::CLI.start(ARGV)
